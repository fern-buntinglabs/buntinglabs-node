/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { BuntinglabsApi } from "@fern-api/buntinglabs";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.BuntinglabsApiEnvironment | string;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * Calculate the number of people living in a radius around a point, according to US Census data.
     */
    public async population(
        request: BuntinglabsApi.ExtractFeaturesRequest
    ): Promise<BuntinglabsApi.PopulationResponse> {
        const _queryParams = new URLSearchParams();
        if (request.center != null) {
            _queryParams.append("center", request.center);
        }

        if (request.address != null) {
            _queryParams.append("address", request.address);
        }

        _queryParams.append("radius", request.radius.toString());
        _queryParams.append("api_key", request.apiKey);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.BuntinglabsApiEnvironment.Production,
                "/census/extract"
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.PopulationResponse.parse(_response.body as serializers.PopulationResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuntinglabsApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuntinglabsApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuntinglabsApiTimeoutError();
            case "unknown":
                throw new errors.BuntinglabsApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * Calculate the median income of the population inside a circle centered at a point with a given radius.
     * You can provide either a coordinate (latitude and longitude) or an address, plus a radius around the center.
     * This endpoint is useful for real estate applications, when one might want to contextualize a property according to its surrounding neighborhood.
     *
     */
    public async median(request: BuntinglabsApi.IncomeRequest): Promise<BuntinglabsApi.IncomeResponse> {
        const _queryParams = new URLSearchParams();
        if (request.center != null) {
            _queryParams.append("center", request.center);
        }

        if (request.address != null) {
            _queryParams.append("address", request.address);
        }

        _queryParams.append("radius", request.radius.toString());
        _queryParams.append("api_key", request.apiKey);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.BuntinglabsApiEnvironment.Production,
                "/census/income"
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.IncomeResponse.parse(_response.body as serializers.IncomeResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuntinglabsApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuntinglabsApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuntinglabsApiTimeoutError();
            case "unknown":
                throw new errors.BuntinglabsApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
