/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { BuntinglabsApi } from "@fern-api/buntinglabs";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.BuntinglabsApiEnvironment | string;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * This endpoint downloads features from OpenStreetMap based on tags and optionally a bounding box, resulting in a GeoJSON.
     * This API extracts features from the OpenStreetMap database and formats them as GeoJSON.
     * You can filter for any tag in the database, either as `key=value` or `key=*`, and can chain tags if you need 2+ tags.
     * This endpoint is especially useful for extracting map data directly to user applications (like the browser) or as a faster alternative to [Overpass Turbo](http://overpass-turbo.eu/) and the [Overpass API](http://overpass-api.de/).
     *
     */
    public async extractFeatures(
        request: BuntinglabsApi.ExtractFeaturesRequest
    ): Promise<BuntinglabsApi.FeatureCollection> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("tags", request.tags);
        if (request.bbox != null) {
            _queryParams.append("bbox", request.bbox);
        }

        _queryParams.append("api_key", request.apiKey);
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.BuntinglabsApiEnvironment.Production, "/osm/extract"),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.FeatureCollection.parse(_response.body as serializers.FeatureCollection.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuntinglabsApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuntinglabsApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuntinglabsApiTimeoutError();
            case "unknown":
                throw new errors.BuntinglabsApiError({
                    message: _response.error.errorMessage,
                });
        }
    }

    /**
     * This endpoint counts the features in OpenStreetMap that match the given tags and reside in a bounding box.
     *
     */
    public async countFeatures(
        request: BuntinglabsApi.CountFeaturesRequest
    ): Promise<BuntinglabsApi.CountFeatureResponse> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("tags", request.tags);
        if (request.bbox != null) {
            _queryParams.append("bbox", request.bbox);
        }

        _queryParams.append("api_key", request.apiKey);
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.BuntinglabsApiEnvironment.Production, "/osm/count"),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.CountFeatureResponse.parse(_response.body as serializers.CountFeatureResponse.Raw);
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuntinglabsApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuntinglabsApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuntinglabsApiTimeoutError();
            case "unknown":
                throw new errors.BuntinglabsApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
