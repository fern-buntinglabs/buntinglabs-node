/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { BuntinglabsApi } from "@fern-api/buntinglabs";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.BuntinglabsApiEnvironment | string;
        token?: core.Supplier<core.BearerToken>;
    }
}

/**
 * Locate and download the boundary of a section inside a survey township as GeoJSON
 */
export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * This API finds a Public Land Survey System section based on its section number, range, township, and principal meridian. For example, if you were looking at a survey plat in San Francisco, California, it might refer to the section as being section 31 in range R05W, township T02S, and meridian MDM. This means that the section falls inside the survey township located 2 townships south and 5 townships west of the Mt. Diablo Meridian and its base line, and as section 31, it is the southwest corner of that township. This API enables you to download the GeoJSON for a particular range, township, meridian, and section number combination.
     */
    public async section(
        request: BuntinglabsApi.GeocodeSectionRequest
    ): Promise<BuntinglabsApi.GeocodeSectionResponse> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("section", request.section.toString());
        _queryParams.append("range", request.range);
        _queryParams.append("township", request.township);
        _queryParams.append("meridian", request.meridian);
        _queryParams.append("api_key", request.apiKey);
        const _response = await core.fetcher({
            url: urlJoin(
                this.options.environment ?? environments.BuntinglabsApiEnvironment.Production,
                "/plss/section"
            ),
            method: "POST",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.GeocodeSectionResponse.parse(
                _response.body as serializers.GeocodeSectionResponse.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuntinglabsApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuntinglabsApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuntinglabsApiTimeoutError();
            case "unknown":
                throw new errors.BuntinglabsApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
