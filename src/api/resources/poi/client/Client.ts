/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import { BuntinglabsApi } from "@fern-api/buntinglabs";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization";
import * as errors from "../../../../errors";

export declare namespace Client {
    interface Options {
        environment?: environments.BuntinglabsApiEnvironment | string;
        token?: core.Supplier<core.BearerToken>;
    }
}

export class Client {
    constructor(private readonly options: Client.Options) {}

    /**
     * This endpoint generates a description of a neighborhood surrounding a location. This is useful for describing a rental or home listing on a website or contextualizing a potential investment opportunity for prospective investors.
     */
    public async neighborhood(request: BuntinglabsApi.PoiRequest): Promise<string> {
        const _queryParams = new URLSearchParams();
        _queryParams.append("location", request.location);
        _queryParams.append("api_key", request.apiKey);
        const _response = await core.fetcher({
            url: urlJoin(this.options.environment ?? environments.BuntinglabsApiEnvironment.Production, "/poi/"),
            method: "GET",
            headers: {
                Authorization: core.BearerToken.toAuthorizationHeader(await core.Supplier.get(this.options.token)),
            },
            queryParameters: _queryParams,
        });
        if (_response.ok) {
            return await serializers.poi.neighborhood.Response.parse(
                _response.body as serializers.poi.neighborhood.Response.Raw
            );
        }

        if (_response.error.reason === "status-code") {
            throw new errors.BuntinglabsApiError({
                statusCode: _response.error.statusCode,
                responseBody: _response.error.rawBody,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.BuntinglabsApiError({
                    statusCode: _response.error.statusCode,
                    responseBody: _response.error.rawBody,
                });
            case "timeout":
                throw new errors.BuntinglabsApiTimeoutError();
            case "unknown":
                throw new errors.BuntinglabsApiError({
                    message: _response.error.errorMessage,
                });
        }
    }
}
